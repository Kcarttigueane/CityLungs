version: "3.8"

services:
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - smartcity-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    image: ${REGISTRY}/${PROJECT_PATH}/backend:latest
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${DJANGO_SECRET_KEY}
      DEBUG: "False"
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
    networks:
      - smartcity-network
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn core.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 4 --timeout 120
      "

  frontend:
    image: ${REGISTRY}/${PROJECT_PATH}/frontend:latest
    restart: unless-stopped
    networks:
      - smartcity-network
    depends_on:
      - backend

  pipeline:
    image: ${REGISTRY}/${PROJECT_PATH}/pipeline:latest
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL}
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
      OPENAQ_API_KEY: ${OPENAQ_API_KEY}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - smartcity-network

  ml_service:
    image: ${REGISTRY}/${PROJECT_PATH}/ml:latest
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL}
      MODEL_PATH: /app/models
    volumes:
      - ml_models:/app/models
    depends_on:
      db:
        condition: service_healthy
    networks:
      - smartcity-network

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
      - letsencrypt:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - smartcity-network

  # Optional: Redis for caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - smartcity-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  static_volume:
  media_volume:
  ml_models:
  letsencrypt:

networks:
  smartcity-network:
    driver: bridge
